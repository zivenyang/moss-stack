version: '3.9'

services:
  #---------------------------------------------------#
  #  Application Services
  #---------------------------------------------------#
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: proofreader-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app # Mount source code for live-reloading
    env_file:
      - ./backend/.env # Load environment variables from .env file
    # environment:
      # Override or set specific environment variables here if needed
      # These values are for inter-container communication
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    networks:
      - proofreader-net

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: proofreader-worker
    env_file:
      - ./backend/.env
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@db:5432/app
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: ["python", "-m", "app.workers.main"]
    volumes:
      - ./backend:/app
    restart: on-failure
    networks:
      - proofreader-net

  #---------------------------------------------------#
  #  Database Services
  #---------------------------------------------------#
  db:
    image: postgres:15-alpine
    container_name: proofreader-db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=app
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d app"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - proofreader-net

  #---------------------------------------------------#
  #  Messaging & Caching Services
  #---------------------------------------------------#
  redis:
    image: redis:7-alpine
    container_name: proofreader-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - proofreader-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ['CMD', 'bash', '-c', "printf 'stat' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - proofreader-net

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"   # For inter-container communication
      - "29092:29092" # For host machine to access Kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true' # For development convenience
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - proofreader-net

#---------------------------------------------------#
#  Volumes & Networks
#---------------------------------------------------#
volumes:
  postgres_data:
    driver: local

networks:
  proofreader-net:
    driver: bridge